#! /usr/bin/env python3
import click

from Jumpscale import j


def get_client(redis_host, redis_port, redis_secret, session, date, context, pid, wait_interval):
    client = j.clients.logger.get("js_logs")
    if redis_host:
        client.redis_host = redis_host
    if redis_port:
        client.redis_port = redis_port
    if redis_secret:
        client.redis_secret = redis_secret
    if session:
        client.session = session
    if wait_interval:
        client.wait_interval = wait_interval

    client.pid = pid
    client.date = date
    client.context = context
    return client


def common_options(function):
    click.option("--redis-host", default=None, help="redis host (defaults to localhost)")(function)
    click.option("--redis-port", default=6379, help="redis port (defaults to 6379)")(function)
    click.option("--redis-secret", default=None, help="redis secret (empty by default)")(function)
    click.option("--session", default=None, help="session name (defaults to jumpscale)")(function)
    click.option("--date", default=j.data.time.epoch, help="filter by date (epoch), defaults to today")(function)
    click.option("--context", default="main", help="filter by context (can be main, error...etc), defaults to main")(
        function
    )
    click.option("--pid", default=0, help="filter by process id, defaults to all")(function)
    click.option("--wait-interval", default=0.0, help="wait interval for polling logs from server, defaults to 0")(
        function
    )
    return function


@click.group()
@common_options
@click.pass_context
def cli(ctx, redis_host, redis_port, redis_secret, session, date, context, pid, wait_interval):
    ctx.obj = get_client(redis_host, redis_port, redis_secret, session, date, context, pid, wait_interval)


@cli.command()
@click.pass_obj
def tail(client):
    """
    tail logs from session
    """
    client.tail()


@cli.command()
@click.option("--path", required=True, help="output file path")
@click.pass_obj
def dump(client, path):
    """
    dump logs of session to file
    """
    client.dump(path)


if __name__ == "__main__":
    cli()
